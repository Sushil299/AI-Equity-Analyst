# -*- coding: utf-8 -*-
"""backend

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMPFrnSiYVrOpvw5fv4SMpnmB-e-CE9z
"""

import os
from fastapi import FastAPI, UploadFile, File, Form
import google.generativeai as genai
import fitz  # PyMuPDF for PDF processing
import uvicorn
import nest_asyncio
import sqlite3
import datetime

# Allow FastAPI to run asynchronously
nest_asyncio.apply()

app = FastAPI()

# Load Gemini API Key from Environment Variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # Securely fetch from environment
if not GEMINI_API_KEY:
    raise ValueError("‚ùå ERROR: GEMINI_API_KEY is not set in environment variables.")

genai.configure(api_key=GEMINI_API_KEY)

# Connect to SQLite Database
conn = sqlite3.connect("summaries.db", check_same_thread=False)
cursor = conn.cursor()

# Create Table to Store Summaries
cursor.execute("""
CREATE TABLE IF NOT EXISTS summaries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    company_name TEXT,
    document_date DATE,
    document_type TEXT,
    filename TEXT,
    summary TEXT
)
""")
conn.commit()

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    doc = fitz.open(stream=pdf_file, filetype="pdf")
    text = "\n".join([page.get_text("text") for page in doc])  # Proper text formatting
    return text

# Function to analyze financial documents using Gemini Flash
def analyze_financial_text(text):
    model = genai.GenerativeModel("gemini-1.5-flash")

    prompt = f"""
    Analyze this financial document and provide a structured summary.

    Key Points:
    1. **Key Financial Highlights**
    2. **Growth Opportunities (Green Flags)**
    3. **Risks & Concerns (Red Flags)**
    4. **Market Sentiment Analysis**

    Document Text: {text}
    """

    response = model.generate_content(prompt)
    return response.text

# API Endpoint to Upload Files
@app.post("/upload/")
async def upload_file(
    file: UploadFile = File(...),
    company_name: str = Form(...),
    document_date: str = Form(...),
    document_type: str = Form(...)
):
    try:
        datetime.datetime.strptime(document_date, "%Y-%m-%d")
    except ValueError:
        return {"error": "Invalid date format. Use YYYY-MM-DD."}

    file_bytes = await file.read()

    if file.filename.endswith(".pdf"):
        text = extract_text_from_pdf(file_bytes)
    else:
        text = file_bytes.decode("utf-8")

    analysis = analyze_financial_text(text)

    cursor.execute(
        "INSERT INTO summaries (company_name, document_date, document_type, filename, summary) VALUES (?, ?, ?, ?, ?)",
        (company_name, document_date, document_type, file.filename, analysis)
    )
    conn.commit()

    return {
        "Company Name": company_name,
        "Date": document_date,
        "Document Type": document_type,
        "Filename": file.filename,
        "Analysis": analysis
    }

# API Endpoint to Get Summaries for a Selected Company
@app.get("/summary/{company_name}")
async def get_summary(company_name: str):
    cursor.execute("SELECT document_date, document_type, filename, summary FROM summaries WHERE company_name = ? ORDER BY document_date DESC", (company_name,))
    rows = cursor.fetchall()

    if not rows:
        return {"message": "No summaries found for this company."}

    result = [
        {"Date": row[0], "Document Type": row[1], "Filename": row[2], "Summary": row[3]}
        for row in rows
    ]

    return {"Company Name": company_name, "Summaries": result}

# Start FastAPI Server
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)