# -*- coding: utf-8 -*-
"""backend

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMPFrnSiYVrOpvw5fv4SMpnmB-e-CE9z
"""

import os
import psycopg2
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
import fitz  # PyMuPDF for PDF text extraction
import google.generativeai as genai

# ‚úÖ Initialize FastAPI
app = FastAPI(title="AI Equity Research API")

# ‚úÖ PostgreSQL Database Connection
DATABASE_URL = os.getenv("DATABASE_URL")  # Set this in Render's environment variables
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# ‚úÖ Ensure Tables Exist
cursor.execute("""
CREATE TABLE IF NOT EXISTS final_analysis (
    id SERIAL PRIMARY KEY,
    company_name TEXT NOT NULL,
    analysis_quarter TEXT NOT NULL,
    final_summary TEXT NOT NULL,
    UNIQUE(company_name, analysis_quarter)
);
""")
conn.commit()

# ‚úÖ Configure Gemini AI
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # Set in Render's environment variables
genai.configure(api_key=GEMINI_API_KEY)

# ‚úÖ Extract Text from PDF Without Storing the File
async def extract_text_from_pdf(file: UploadFile):
    file_bytes = await file.read()  # Read the file asynchronously
    doc = fitz.open(stream=file_bytes, filetype="pdf")
    return "\n".join([page.get_text("text") for page in doc])

# ‚úÖ API: Upload & Process Files
@app.post("/upload/")
async def upload_files(
    company_name: str = Form(...),
    analysis_quarter: str = Form(...),
    quarterly_report: UploadFile = File(...),
    investor_presentation: UploadFile = File(...),
    earnings_call_transcript: UploadFile = File(...)
):
    try:
        # ‚úÖ Extract text from all uploaded PDFs
        report_text = await extract_text_from_pdf(quarterly_report)
        presentation_text = await extract_text_from_pdf(investor_presentation)
        transcript_text = await extract_text_from_pdf(earnings_call_transcript)

        # ‚úÖ Combine all document texts
        combined_text = f"""
        Quarterly Report:\n{report_text}\n\n
        Investor Presentation:\n{presentation_text}\n\n
        Earnings Call Transcript:\n{transcript_text}\n
        """

        # ‚úÖ Generate AI Analysis
        ai_prompt = f"""

        "You are an advanced AI equity analyst specializing in fundamental and financial analysis. Given the earnings call transcript, investor presentation, and quarterly results of {company_name} for {analysis_quarter} generate a well-structured equity research report. Your goal is to provide clear and actionable insights for investors, helping them make informed investment decisions. Also make sure not to write "AI powered equity report in title.
        Just mention - Company Name and Quarter in subtitle or header2

        Structure your response as follows:
        1Ô∏è‚É£ Company Overview - Briefly introduce the company, its industry, and its business model.

        2Ô∏è‚É£ Financial Performance Summary
        Highlight revenue, profit, margins, and any notable trends.
        Compare year-over-year (YoY) and quarter-over-quarter (QoQ) performance.
        Mention any significant financial improvements or concerns.

        3Ô∏è‚É£ Key Highlights from the Earnings Call

        Summarize important takeaways from management‚Äôs discussion.
        Address strategic plans, growth initiatives, and operational updates.

        4Ô∏è‚É£ Market Trends & Industry Outlook

        Discuss relevant macroeconomic factors, market trends, and industry conditions.
        Explain how these factors impact the company‚Äôs future prospects.

        5Ô∏è‚É£ Risks & Challenges

        Identify potential risks, including regulatory, competitive, or financial risks.
        Explain how the company is addressing these risks.

        6Ô∏è‚É£ Investment Thesis & Outlook
        Provide an overall investment assessment.
        Is the stock a Buy, Hold, or Sell based on the current data?
        Justify the recommendation with key financials and qualitative insights.

        üìå Ensure the analysis is factual, well-organized, and written in a professional tone. Do not speculate without data. Avoid generic statements‚Äîsupport insights with concrete financials or management commentary

        **Data Sources:**
        {combined_text}
        """
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(ai_prompt)
        final_analysis = response.text

        # ‚úÖ Store AI-generated report in `final_analysis` table
        cursor.execute("""
            INSERT INTO final_analysis (company_name, analysis_quarter, final_summary)
            VALUES (%s, %s, %s)
            ON CONFLICT (company_name, analysis_quarter) DO UPDATE
            SET final_summary = EXCLUDED.final_summary
        """, (company_name, analysis_quarter, final_analysis))
        conn.commit()

        return {"message": "‚úÖ Files uploaded & AI analysis updated successfully."}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to process files: {str(e)}")

# ‚úÖ API: Fetch Precomputed AI Report
@app.get("/summary/{company_name}")
async def get_summary(company_name: str):
    try:
        cursor.execute("SELECT final_summary FROM final_analysis WHERE company_name = %s", (company_name,))
        result = cursor.fetchone()
        if result:
            return JSONResponse(content={"final_summary": result[0]})
        return JSONResponse(content={"error": "No analysis found"}, status_code=404)
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

# ‚úÖ API: Fetch All Companies
@app.get("/companies")
async def get_companies():
    try:
        conn = psycopg2.connect(DATABASE_URL)  # Open new DB connection
        cursor = conn.cursor()

        cursor.execute("SELECT DISTINCT company_name FROM final_analysis")
        companies = [row[0] for row in cursor.fetchall()]

        cursor.close()  # Close the cursor properly
        conn.close()  # Close the connection properly

        return {"companies": companies} if companies else {"message": "No companies found."}

    except Exception as e:
        return {"error": f"Database error: {str(e)}"}
