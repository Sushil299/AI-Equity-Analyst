# -*- coding: utf-8 -*-
"""backend

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMPFrnSiYVrOpvw5fv4SMpnmB-e-CE9z
"""

import os
import psycopg2
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
import fitz  # PyMuPDF for PDF text extraction
import google.generativeai as genai

# ✅ Initialize FastAPI
app = FastAPI(title="AI Equity Research API")

# ✅ PostgreSQL Database Connection
DATABASE_URL = os.getenv("DATABASE_URL")  # Set this in Render's environment variables
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# ✅ Ensure Tables Exist
cursor.execute("""
CREATE TABLE IF NOT EXISTS final_analysis (
    id SERIAL PRIMARY KEY,
    company_name TEXT NOT NULL,
    analysis_quarter TEXT NOT NULL,
    final_summary TEXT NOT NULL,
    UNIQUE(company_name, analysis_quarter)
);
""")
conn.commit()

# ✅ Configure Gemini AI
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # Set in Render's environment variables
genai.configure(api_key=GEMINI_API_KEY)

# ✅ Extract Text from PDF Without Storing the File
async def extract_text_from_pdf(file: UploadFile):
    file_bytes = await file.read()  # Read the file asynchronously
    doc = fitz.open(stream=file_bytes, filetype="pdf")
    return "\n".join([page.get_text("text") for page in doc])

# ✅ API: Upload & Process Files
@app.post("/upload/")
async def upload_files(
    company_name: str = Form(...),
    analysis_quarter: str = Form(...),
    quarterly_report: UploadFile = File(...),
    investor_presentation: UploadFile = File(...),
    earnings_call_transcript: UploadFile = File(...)
):
    try:
        # ✅ Extract text from all uploaded PDFs
        report_text = await extract_text_from_pdf(quarterly_report)
        presentation_text = await extract_text_from_pdf(investor_presentation)
        transcript_text = await extract_text_from_pdf(earnings_call_transcript)

        # ✅ Combine all document texts
        combined_text = f"""
        Quarterly Report:\n{report_text}\n\n
        Investor Presentation:\n{presentation_text}\n\n
        Earnings Call Transcript:\n{transcript_text}\n
        """

        # ✅ Generate AI Analysis
        ai_prompt = f"""
        Generate a structured **equity research report** for {company_name} for {analysis_quarter}.

        **1. Executive Summary**
        **2. Key Financial Highlights** (Show in Markdown table)
        **3. Business & Operational Highlights**
        **4. Market & Competitive Positioning**
        **5. Valuation & Outlook**

        **Data Sources:**
        {combined_text}
        """
        model = genai.GenerativeModel("gemini-1.5-flash")
        response = model.generate_content(ai_prompt)
        final_analysis = response.text

        # ✅ Store AI-generated report in `final_analysis` table
        cursor.execute("""
            INSERT INTO final_analysis (company_name, analysis_quarter, final_summary)
            VALUES (%s, %s, %s)
            ON CONFLICT (company_name, analysis_quarter) DO UPDATE
            SET final_summary = EXCLUDED.final_summary
        """, (company_name, analysis_quarter, final_analysis))
        conn.commit()

        return {"message": "✅ Files uploaded & AI analysis updated successfully."}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to process files: {str(e)}")

# ✅ API: Fetch Precomputed AI Report
@app.get("/summary/{company_name}/{analysis_quarter}")
async def get_summary(company_name: str, analysis_quarter: str):
    cursor.execute("""
        SELECT final_summary FROM final_analysis
        WHERE company_name = %s AND analysis_quarter = %s
    """, (company_name, analysis_quarter))

    row = cursor.fetchone()
    if not row:
        return {"message": "No precomputed analysis found for this company and quarter."}

    return {"Company Name": company_name, "Analysis Quarter": analysis_quarter, "Comprehensive Analysis": row[0]}

# ✅ API: Fetch All Companies
@app.get("/companies")
async def get_companies():
    cursor.execute("SELECT DISTINCT company_name FROM final_analysis")
    companies = [row[0] for row in cursor.fetchall()]
    return {"companies": companies} if companies else {"message": "No companies found."}