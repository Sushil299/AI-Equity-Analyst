# -*- coding: utf-8 -*-
"""backend

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMPFrnSiYVrOpvw5fv4SMpnmB-e-CE9z
"""

import os
import sqlite3
import datetime
from fastapi import FastAPI, UploadFile, File, Form
from fastapi.responses import FileResponse
import google.generativeai as genai
import fitz  # PyMuPDF for PDF processing

# âœ… Change storage paths to relative directories
DB_DIR = "./data"
DB_PATH = os.path.join(DB_DIR, "summaries.db")
UPLOAD_DIR = "./uploads"

# âœ… Ensure directories exist
os.makedirs(DB_DIR, exist_ok=True)
os.makedirs(UPLOAD_DIR, exist_ok=True)

# âœ… Connect to SQLite in a writable location
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# âœ… Create Tables (if they don't exist)
cursor.execute("""
CREATE TABLE IF NOT EXISTS summaries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    company_name TEXT NOT NULL,
    document_date DATE NOT NULL,
    document_type TEXT NOT NULL,
    filename TEXT NOT NULL,
    summary TEXT NOT NULL
)
""")
conn.commit()

# âœ… Configure Gemini AI API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# âœ… Initialize FastAPI
app = FastAPI()

# âœ… Function to Extract Text from PDF
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = "\n".join([page.get_text("text") for page in doc])
    return text

# âœ… API: Upload Files & Store Permanently
@app.post("/upload/")
async def upload_file(
    file: UploadFile = File(...),
    company_name: str = Form(...),
    document_date: str = Form(...),
    document_type: str = Form(...)
):
    try:
        # Validate Date Format
        datetime.datetime.strptime(document_date, "%Y-%m-%d")

        # âœ… Save file in `./uploads/`
        file_path = os.path.join(UPLOAD_DIR, file.filename)
        with open(file_path, "wb") as f:
            f.write(await file.read())

        # âœ… Extract text from saved PDF file
        text = extract_text_from_pdf(file_path)

        # âœ… Store in SQLite
        cursor.execute("""
            INSERT INTO summaries (company_name, document_date, document_type, filename, summary)
            VALUES (?, ?, ?, ?, ?)
        """, (company_name, document_date, document_type, file.filename, text))
        conn.commit()

        return {"message": "âœ… File uploaded successfully & stored permanently!"}

    except Exception as e:
        conn.rollback()
        return {"error": f"Failed to upload file: {str(e)}"}

# âœ… API: Fetch All Companies for Dropdown in Frontend
@app.get("/companies")
async def get_companies():
    cursor.execute("SELECT DISTINCT company_name FROM summaries")
    companies = [row[0] for row in cursor.fetchall()]
    return {"companies": companies} if companies else {"message": "No companies found."}

# âœ… API: Generate Comprehensive Analysis from Stored Data
@app.get("/summary/{company_name}")
async def get_summary(company_name: str):
    cursor.execute("SELECT document_type, summary FROM summaries WHERE company_name = ?", (company_name,))
    rows = cursor.fetchall()

    if not rows:
        return {"message": "No documents found for this company."}

    doc_texts = {doc_type: "" for doc_type, _ in rows}
    for doc_type, summary in rows:
        doc_texts[doc_type] += summary + "\n\n"

    # âœ… Generate AI-Powered Analysis
    ai_prompt = f"""
    You are a financial analyst. Generate a structured **equity research report** for {company_name} using:

    **ðŸ”¹ 1. Executive Summary**
    **ðŸ”¹ 2. Key Financial Highlights (Table)**
    **ðŸ”¹ 3. Business & Operational Highlights**
    **ðŸ”¹ 4. Market & Competitive Positioning**
    **ðŸ”¹ 5. Valuation & Outlook (Include Charts)**

    **Annual Report Summary:** {doc_texts.get('Annual Report', 'No annual report available.')}
    **Earnings Call Summary:** {doc_texts.get('Earnings Call Transcript', 'No earnings call available.')}
    **Investor Presentation Summary:** {doc_texts.get('Investor Presentation', 'No investor presentation available.')}
    **Analyst Call Summary:** {doc_texts.get('Analyst Call Transcript', 'No analyst call available.')}

    Ensure the response is formatted properly with markdown tables.
    """

    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(ai_prompt)

    return {"Company Name": company_name, "Comprehensive Analysis": response.text}